networks:
  posts_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24

services:
  users-db:
    container_name: users-db
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./data-persist/users-data:/var/lib/postgresql/data
    profiles: [db-user]

  post-db-master:
    container_name: post-db-master
    image: postgres
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./data-persist/post-db-master:/var/lib/postgresql/data
    profiles: [db-post]
    networks:
      posts_network:
        ipv4_address: 192.168.1.100

  post-db-replica:
    container_name: post-db-replica
    image: postgres
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./data-persist/post-db-replica:/var/lib/postgresql/data
    profiles: [db-post]
    networks:
      posts_network:
        ipv4_address: 192.168.1.101
    depends_on:
      - post-db-master

  comments-db:
    container_name: comments-db
    image: postgres
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./data-persist/comments-db:/var/lib/postgresql/data
    profiles: [db-comments]

  redis:
    container_name: redis
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    restart: always
    profiles: [cache]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    profiles: [kafka]

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    profiles: [kafka]

  nginx:
    image: nginx:latest  # This specifies the Nginx image to use
    container_name: nginx
    restart: always
    ports:
      - "8080:8080"  # This port mapping allows the Nginx container to listen on port 8080 on the host machine
    volumes:
      - ./data-persist/nginx/html:/usr/share/nginx/html  # This volume mounts the html directory from the host into the Nginx container
      - ./data-persist/nginx/conf.d:/etc/nginx/conf.d  # This volume mounts the conf.d directory from the host into the Nginx container
    extra_hosts:
      - "host.docker.internal:host-gateway"  # This extra host is used to allow the Nginx container to access the host machine
    profiles: [nginx]
    # use host as host.docker.internal while adding server to pgadmin

  pgadmin:
    image: dpage/pgadmin4:latest  # This specifies the Nginx image to use
    container_name: pgadmin
    ports:
      - "5050:80"  # This port mapping allows the Nginx container to listen on port 8080 on the host machine
    extra_hosts:
      - "host.docker.internal:host-gateway"  # This extra host is used to allow the Nginx container to access the host machine
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=password
    profiles: [pgadmin]


  auth-service:
    container_name: auth-service
    build:
      context: ./Auth
    ports:
      - "8001:8001"
    # depends_on: 
    #   - users-db
    profiles: [auth]

  post-service:
    container_name: post-service
    build:
      context: ./Post
    ports:
      - "8002:8002"
    depends_on: 
      - post-db-master
    profiles: [post]

  post-consumer:
    container_name: post-consumer
    build:
      context: ./PostConsumer
    depends_on: 
      - post-db-master
    profiles: [post]

  affinity-service:
    container_name: affinity-service
    build:
      context: ./UserAffinity
    ports:
      - "8003:8003"
    depends_on: 
      - users-db
    profiles: [affinity]

  comments-service:
    container_name: comments-service
    build:
      context: ./Comments
    ports:
      - "8004:8004"
    depends_on: 
      - comments-db
    profiles: [comments]

  comments-consumer:
    container_name: comments-consumer
    build:
      context: ./CommentsConsumer
    depends_on: 
      - comments-db
    profiles: [comments]
    